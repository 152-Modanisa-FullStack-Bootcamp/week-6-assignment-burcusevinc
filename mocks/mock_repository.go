// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/userlocalstorage.go

// Package mock_repository is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "go.mod/model"
)

// MockIUserLocalStorage is a mock of IUserLocalStorage interface.
type MockIUserLocalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIUserLocalStorageMockRecorder
}

// MockIUserLocalStorageMockRecorder is the mock recorder for MockIUserLocalStorage.
type MockIUserLocalStorageMockRecorder struct {
	mock *MockIUserLocalStorage
}

// NewMockIUserLocalStorage creates a new mock instance.
func NewMockIUserLocalStorage(ctrl *gomock.Controller) *MockIUserLocalStorage {
	mock := &MockIUserLocalStorage{ctrl: ctrl}
	mock.recorder = &MockIUserLocalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserLocalStorage) EXPECT() *MockIUserLocalStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserLocalStorage) CreateUser(user *model.User) *model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*model.User)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserLocalStorageMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserLocalStorage)(nil).CreateUser), user)
}

// GetAllUsers mocks base method.
func (m *MockIUserLocalStorage) GetAllUsers() map[string]*model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(map[string]*model.User)
	return ret0
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIUserLocalStorageMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIUserLocalStorage)(nil).GetAllUsers))
}

// GetUser mocks base method.
func (m *MockIUserLocalStorage) GetUser(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserLocalStorageMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserLocalStorage)(nil).GetUser), username)
}

// UpdateUser mocks base method.
func (m *MockIUserLocalStorage) UpdateUser(user *model.User) *model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*model.User)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserLocalStorageMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserLocalStorage)(nil).UpdateUser), user)
}
